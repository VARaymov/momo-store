stages:
  - build
  - test
  - release

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
 
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SONAR_PROJECT_NAME: store_frontend

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd application/frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/store-frontend-nginx:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/store-frontend-nginx:$CI_COMMIT_SHA
  rules:
    - when: manual

sonarqube-frontend-sast:
  stage: test
  variables:
    COMPILE: "true"
  image: sonarsource/sonar-scanner-cli
  script:
      - sonar-scanner
        -Dsonar.sources=application/frontend
        -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND}
        -Dsonar.host.url=${SONARQUBE_URL_FRONTEND}
        -Dsonar.login=${SONAR_LOGIN_FRONTEND}
        -Dsonar.projectName=${SONAR_PROJECT_NAME}
  needs:
    - build-frontend

gitlab-sast:
  stage: test
  needs:
    - build-frontend
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

upload-frontend-latest:
  stage: release
  needs:
    - build-frontend
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/store-frontend-nginx:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/store-frontend-nginx:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/store-frontend-nginx:latest
    - docker push $CI_REGISTRY_IMAGE/store-frontend-nginx:latest
