stages:
  - build
  - test
  - release
  #- deploy

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SONAR_PROJECT_NAME: store_backend

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/store-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/store-backend:$CI_COMMIT_SHA
  rules:
    - when: manual

sonarqube-backend-sast:
  variables:
    compile: "true"
  stage: test
  only:
    changes:
      - backend/*
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner
      -Dsonar.sources=\backend
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL_BACKEND}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}
      -Dsonar.projectName=${SONAR_PROJECT_NAME}
  needs:
    - build-backend


gitlab-sast:
  stage: test
  needs:
    - build-backend
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml


upload-backend-latest:
  stage: release
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/store-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/store-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/store-backend:latest
    - docker push $CI_REGISTRY_IMAGE/store-backend:latest




#deploy-backend:
#  stage: deploy
#  image: vault:1.11.3
#  before_script:
#    - apk add openssh-client bash
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - SSH_KNOWN_HOSTS=$(ssh-keyscan $DEV_HOST)
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - scp ${CI_PROJECT_DIR}/docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
#    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=store-store jwt=$CI_JOB_JWT)"
#    - ssh ${DEV_USER}@${DEV_HOST}
#      "export "VERSION=${VERSION}";
#       export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
#       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
#       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/store-store)";
#       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/store-store)";
#       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
#       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
#       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
#       export "CI_REGISTRY=${CI_REGISTRY}";
#      /bin/bash -s " < ./backend/backend_deploy.sh
#  rules: 
#    - when: manual
