stages:
  - build
  - test
  - release
  - deploy

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
 
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SONAR_PROJECT_NAME: store_frontend

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend-nginx:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend-nginx:$CI_COMMIT_SHA
  rules:
    - when: manual

sonarqube-frontend-sast:
  stage: test
  variables:
    COMPILE: "true"
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} 
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL_FRONTEND} 
      -Dsonar.login=${SONAR_LOGIN_FRONTEND}
      -Dsonar.projectName="19_RAYUMOVVALERY_FRONTEND"
  needs:
    - build-frontend

gitlab-sast:
  stage: test
  needs:
    - build-frontend
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

upload-frontend-latest:
  stage: release
  needs:
    - build-frontend
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend-nginx:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend-nginx:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend-nginx:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend-nginx:latest

#deploy-frontend:
#  stage: deploy
#  image: alpine:3.15.0
#  before_script:
#    - apk add openssh-client bash
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - SSH_KNOWN_HOSTS=$(ssh-keyscan $DEV_HOST)
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - scp ${CI_PROJECT_DIR}/docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
#    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
#    - ssh ${DEV_USER}@${DEV_HOST}
#      "export "VERSION=${VERSION}";
#       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
#       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
#       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
#       export "CI_REGISTRY=${CI_REGISTRY}";
#      /bin/bash -s " < ./frontend/frontend_deploy.sh
#  rules:
#    - when: manual
